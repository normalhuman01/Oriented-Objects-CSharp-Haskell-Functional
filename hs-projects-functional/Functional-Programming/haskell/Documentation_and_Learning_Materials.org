#+INCLUDE: ../theme/style.org
#+TITLE: Documentation and Learning Materials

* Documentation and Learning Materials
** Code Search Engine

Haskell API search engine, which allows you to search many standard
Haskell libraries by either function name, or by approximate type
signature.

file:https://www.haskell.org/hoogle/res/hoogle.png

 - [[https://www.haskell.org/hoogle][Hoogle]]

 - https://www.haskell.org/documentation

Dohaskell is a tagged Haskell learning resources index. U

 - http://www.dohaskell.com/

** Libraries Documentation
*** Prelude

*Standard Library Prelude.hs*

Prelude.hs is the standard library loaded when Haskell starts.

 - [[http://hackage.haskell.org/package/base-4.7.0.2/docs/Prelude.html#v:getContents][Prelude - Standard defined functions documentation]]
 - [[https://www.haskell.org/onlinereport/standard-prelude.html][Prelude Source Code]]


 - [[http://www.cse.unsw.edu.au/~en1000/haskell/inbuilt.html][Prelude.hs - Examples of How to use prelude functions]]

Nice and precise description of Haskell Libraries:

 - [[https://www.haskell.org/onlinereport/haskell2010/haskellpa1.html][The Haskell 2010 Libraries Part I]]
 - [[https://www.haskell.org/onlinereport/haskell2010/haskellpa2.html#x20-192000II][The Haskell 2010 Libraries Part II]]

 - http://hackage.haskell.org/packages/archive/pkg-list.html

*** Type Classe

 - http://www.haskell.org/haskellwiki/Typeclassopedia

*Monads*

 - http://www.haskell.org/haskellwiki/All_About_Monads
 - http://www.haskell.org/haskellwiki/IO_inside
 - http://en.wikibooks.org/wiki/Haskell/Understanding_monads

*** Online Books

 - [[http://book.realworldhaskell.org][Real-World Haskell by Bryan O'Sullivan et al.]]
 - [[http://learnyouahaskell.com/chapters][Learn You a Haskell for Great Good!]]
 - [[http://en.wikibooks.org/wiki/Haskell][Haskell Wikibook]]
 - [[https://www.haskell.org/tutorial/][Gentle Introduction To Haskell, version 98]]

*** Books

 - [[http://haskelldata.com/][Haskell Data Analysis Cookbook]]
 - [[http://chimera.labs.oreilly.com/books/1230000000929][Parallel and Concurrent Programming in Haskell, By Simon Marlow]]

*** Papers and Articles

Papers

 - [[http://www.cse.chalmers.se/~rjmh/Papers/whyfp.pdf][Why functional programming still matters by John Hughes]]
 - [[http://research.microsoft.com/en-us/um/people/simonpj/Papers/financial-contracts/contracts-icfp.htm][Composing contracts: an adventure in financial engineering ]] - Simon Peyton Jones et al.
 - [[http://homepages.inf.ed.ac.uk/wadler/papers/marktoberdorf/baastad.pdf][Monads for functional programming- Philip Wadler, University of Glasgow?]]
 - [[http://arxiv.org/abs/1412.4880][Learn Physics by Programming in Haskell - Scott N. Walck (Lebanon Valley College, Annville, Pennsylvania, USA) ]]

Repositories of Papers:

 - [[http://homepages.inf.ed.ac.uk/wadler/][Phd. Philip Wadler Papers]]
 - [[http://research.microsoft.com/en-us/um/people/simonpj/papers/papers.html][Simon Peyton Jones: papers]]
 - [[http://www.cs.uu.nl/research/projects/generic-haskell/publications.html][Generic Haskell publications/papers]]

 - [[https://wiki.haskell.org/Research_papers/Functional_pearls][Research papers/Functional pearls]]

 - [[http://www.cis.upenn.edu/~bcpierce/courses/670Fall04/GreatWorksInPL.shtml][Great Works in Programming Languages]]

Journal:
 - [[http://journals.cambridge.org/action/displayJournal?jid=JFP][Journal of Functional Programming]]

Articles:

 - [[http://www.devalot.com/articles/2013/07/why-haskell.html][Why the world needs Haskell]]
 - http://paulkoerbitz.de/posts/Why-I-love-Haskell.html


*** Community

 - http://reddit.com/r/haskell
 - http://www.reddit.com/r/haskellquestions
 - http://stackoverflow.com/questions/tagged?tagnames=haskell
 - irc.freenode.net #haskell on Freenode

Haskell Wiki             

 - http://www.haskell.org/haskellwiki/Category:Tutorials
 - http://www.haskell.org/haskellwiki/Category:Mathematics
 - http://www.haskell.org/haskellwiki/Category:FAQ
 - http://www.haskell.org/haskellwiki/Category:Communitys


*** References by Subject


 - http://www.cis.upenn.edu/~matuszek/Concise%20Guides/Concise%20Haskell98.html
 - http://www.cs.arizona.edu/~collberg/Teaching/372/2009/Handouts/Handout-11.pdf
 - http://en.wikibooks.org/wiki/Yet_Another_Haskell_Tutorial/Language_basics
 - https://courses.cs.washington.edu/courses/cse505/01au/functional/haskell-examples.txts


Toolset
 - <http://en.wikibooks.org/wiki/Haskell/Using_GHCi_effectively>

List

 - <https://wiki.haskell.org/How_to_work_on_lists>
 - <https://hackage.haskell.org/package/base-4.2.0.1/docs/Data-List.html#v%3Atail>

List Comprehension

 - <http://www.cs.nott.ac.uk/~gmh/chapter5.ppt>
 - <http://www.cs.arizona.edu/~collberg/Teaching/372/2005/Html/Html-13/index.html>
 - <http://zvon.org/other/haskell/Outputsyntax/listQcomprehension_reference.html>

Foreign Function Interface - FFI:
 - <http://en.wikibooks.org/wiki/Haskell/FFI>

Misc:

 - <https://www.fpcomplete.com/blog/2013/06/haskell-from-c>
 - <https://wiki.haskell.org/Haskell_programming_tips>
 - <http://bayleshanks.com/tutorials-haskell>

Lambda Calculus Concepts
 - <https://wiki.haskell.org/Anonymous_function>
 - <https://wiki.haskell.org/Closure>
 - <https://wiki.haskell.org/Beta_reduction>

Data Types:
 - <http://en.wikibooks.org/wiki/Haskell/More_on_datatypes>
 - <https://www.fpcomplete.com/school/starting-with-haskell/introduction-to-haskell/2-algebraic-data-types>


Dollar Sign Operator: $
 - <http://stackoverflow.com/questions/940382/haskell-difference-between-dot-and-dollar-sign>
 - <http://snakelemma.blogspot.com.br/2009/12/dollar-operator-in-haskell.html>
 - <http://lambda.jstolarek.com/2012/03/function-composition-and-dollar-operator-in-haskell/>

Pipelining:
 - <http://stackoverflow.com/questions/1457140/haskell-composition-vs-fs-pipe-forward-operator>
 - <http://stackoverflow.com/questions/4090168/is-there-an-inverse-of-the-haskell-operator>

Control:
 - <http://hackage.haskell.org/package/base-4.7.0.2/docs/Control-Monad.html#v:forM>
 - <http://en.wikibooks.org/wiki/Haskell/Control_structures>

*** Video Lectures

*Dr. Erik Meijer Series: Functional Programming Fundamentals*

All lectures: [[http://channel9.msdn.com/Series/C9-Lectures-Erik-Meijer-Functional-Programming-Fundamentals][C9 Lectures: Erik Meijer - Functional Programming Fundamentals Video Series]]

Haskell Videos

 - [[https://www.youtube.com/watch?v=fQU99SJdWGY][Function Definition    - Chapter 4 of 13]]
 - [[https://www.youtube.com/watch?v=cdPyykm2-gg][List Comprehensions    - Chapter 5 of 13]]
 - [[https://www.youtube.com/watch?v=2ECvUT3nbqk][Recursive functions    - Chapter 6 of 13]]
 - [[https://www.youtube.com/watch?v=YRTQkBO2v-s][Higher Order Functions - Chapter 7 of 13]]
 - [[https://www.youtube.com/watch?v=OrAVS4QbMqo][Functional Parsers     - Chapter 8 of 13]]


*Channel 9 MSDN Videos about Functional Programming*

 - http://channel9.msdn.com/Tags/functional+programming


*Haskell Course by Phd. Philip Wadler (Youtube)*

 - [[https://www.youtube.com/playlist?list=PLtRG9GLtNcHBv4cuh2w1cz5VsgY6adoc3][Haskell Course by Phd. Philip Wadler]]

 - [[http://homepages.inf.ed.ac.uk/wadler/][Phillip Wadler's home page]]


*Prof. Dr. Jürgen Giesl*

Credits:  * [[https://github.com/caiorss/Functional-Programming/issues/20][Issue: seoulgithub]]

 - [[http://verify.rwth-aachen.de/giesl/][Prof. Dr. Jürgen Giesl's home page]] (In German.)
 - [[https://videoag.fsmpi.rwth-aachen.de/?course=12ss-funkprog][Lectures in English]]


In this course, you will learn (Compiler+Assembly+Language) together in a single course. So, for a CS background person, this course will be highly beneficiary since Compiler and Assembler both are known to him/her. 

*Haskell From Scratch (Youtube)*

Creating complete programs in Haskell from the ground up.

 - [[https://www.youtube.com/playlist?list=PLxj9UAX4Em-Ij4TKwKvo-SLp-Zbv-hB4B][Haskell From Scratch]]


*Learn you a haskell by Michał Drozd (Youtube)*

 - [[https://www.youtube.com/playlist?list%3DPLPqPwGvHPSZB-urE6QFjKYt6AGXcZqJUh][Learn you a Haskell by Michal Drozd]]


*Loop School*

Good video lectures about Category theory and Haskell programing language.

 - http://school.looprecur.com/

** Hacker News Threads


*Discussions*

 - [[https://news.ycombinator.com/item?id=8118696][Letter to a Young Haskell Enthusiast (comonad.com)]]

 - [[https://news.ycombinator.com/item?id=7804880][Haskell, and Why It Might Be My New Favourite Language (unbui.lt)]]
 - [[https://news.ycombinator.com/item?id=5893442][Ask HN: Any downsides of programming in Haskell?]]

 - [[https://news.ycombinator.com/item?id=4214589][Confession of a Haskell Hacker (r6.ca)]]

 - [[https://news.ycombinator.com/item?id=4961340][Why learning Haskell makes you a better programmer (dubhrosa.blogspot.co.uk)]]

 - [[https://news.ycombinator.com/item?id=9431944][Becoming Productive in Haskell (mechanical-elephant.com)]]

 - [[https://news.ycombinator.com/item?id=7723244][I find the Haskell type system much easier than the Python type system]]

*Applications*

 - [[https://news.ycombinator.com/item?id=6591160][A Haskell kernel for IPython (github.com)]]

 - [[https://news.ycombinator.com/item?id=3868282][Haskell School of Music by Paul Hudak (yale.edu)]]

 - [[https://news.ycombinator.com/item?id=6100967][Automatic SIMD Vectorization for Haskell [pdf] (leafpetersen.com)]]

 - [[https://news.ycombinator.com/item?id=8218307][Using Emacs for Haskell development (github.com)]]

 - [[https://news.ycombinator.com/item?id=8838712][Write You a Haskell: Building a modern functional compiler from first principles (stephendiehl.com)]]

 - [[https://news.ycombinator.com/item?id=7031998][Implementing a JIT Compiled Language with Haskell and LLVM (stephendiehl.com)]]

 - [[https://news.ycombinator.com/item?id=6082645][Haskell Lenses In Pictures (adit.io)]]

*Questions*

 - [[https://news.ycombinator.com/item?id=1909093][Ask HN: Anyone using Haskell in production?]]

 - [[https://news.ycombinator.com/item?id=5370824][Ask HN: How did you really learn Haskell?]]

 - [[https://news.ycombinator.com/item?id=9052269][Out of curiosity: Who has written Haskell & deployed to production in the last 24h and if yes for what kind of app?]]

 - [[https://news.ycombinator.com/item?id=7472452][What it's like to use Haskell (imvu.com)]]

 - [[https://news.ycombinator.com/item?id=305349][Ask YC: if Haskell is the hammer, what should be the nail?]]

 - [[https://news.ycombinator.com/item?id=9434516][Ask HN: What is bad about Haskell?]]

*Haskell Comparison*

 - [[https://news.ycombinator.com/item?id=2062436][Why Lisp is a Big Hack (And Haskell is Doomed to Succeed) (axisofeval.blogspot.com)]]

 - [[https://news.ycombinator.com/item?id=2413816][Could someone comment on Haskell in comparison to Erlang, Clojure or Scala?]]

*What Haskell Taught Me*

 - [[https://news.ycombinator.com/item?id=9630621][What Haskell taught me about writing Swift (realm.io)]]

 - [[https://news.ycombinator.com/item?id=3614099][Learn from Haskell - Functional, Reusable JavaScript (github.com)]]

 - [[https://news.ycombinator.com/item?id=2924971][Why Haskell is Kinda Cool (github.com)]]

*Problems*

 - [[https://news.ycombinator.com/item?id=8909126][I think I've solved the Haskell records problem (nikita-volkov.github.io)]]
 - [[https://news.ycombinator.com/item?id=8970733][Use Haskell for shell scripting (haskellforall.com)]]

 - [[https://news.ycombinator.com/item?id=4029056][Why is Haskell used so little in the industry? (stackoverflow.com)]]

 - [[https://news.ycombinator.com/item?id=8480551][Haskell Is Exceptionally Unsafe (2012) (existentialtype.wordpress.com)]]
