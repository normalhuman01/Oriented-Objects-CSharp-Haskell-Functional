{- В некоторых ситуациях выводится не наиболее общий тип, а более специальный. Это имеет определенные причины, связанные с производительностью в некоторых (весьма редких) ситуациях. Общее мнение (почти консенсус), что это ограничение надо выкинуть из стандарта языка. В GHCi оно по умолчанию отключено, а вот при компиляции из модуля по умолчанию включено. Отключить monomorphism restriction можно, указав в начале файла исходного кода следующую прагму: -}
{-# LANGUAGE NoMonomorphismRestriction #-}

module Demo where

{- В модуле Data.Function определена полезная функция высшего порядка -}
on :: (b -> b -> c) -> (a -> b) -> a -> a -> c
on op f x y = f x `op` f y
{- Она принимает четыре аргумента: 
 1) бинарный оператор с однотипными аргументами (типа b), 
 2) функцию f :: a -> b, возвращающую значение типа b, 
 3,4) и два значения типа a. 
Функция on применяет f дважды к двум значениям типа a и передает результат в бинарный оператор.

Используя on можно, например, записать функцию суммирования квадратов аргументов так: -}
sumSquares = (+) `on` (^2)

{- Функция multSecond, перемножающая вторые элементы пар, реализована следующим образом -}
multSecond = g `on` h
g = (*)
h = snd
